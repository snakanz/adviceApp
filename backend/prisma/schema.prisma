// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema for AdvisorAgent backend

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email            String    @unique
  name             String?
  provider         String    // e.g. 'google', 'microsoft'
  providerId       String    // OAuth provider user id
  meetings         Meeting[]
  calendarTokens   CalendarToken?
  createdAt        DateTime  @default(now())
}

model CalendarToken {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  provider      String   // e.g. 'google', 'microsoft'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Meeting {
  id           Int          @id @default(autoincrement())
  userId       String
  googleEventId String
  recallBotId  String?
  title        String
  startTime    DateTime
  endTime      DateTime
  status       String      // scheduled, completed, cancelled
  transcript   String?
  notes        String?
  summary      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  recording    Recording?
  actionItems  ActionItem[]

  @@index([userId])
  @@index([googleEventId])
  @@unique([googleEventId, userId])
}

model Recording {
  id          Int      @id @default(autoincrement())
  meeting     Meeting  @relation(fields: [meetingId], references: [id])
  meetingId   Int      @unique
  url         String
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ActionItem {
  id          Int      @id @default(autoincrement())
  meeting     Meeting  @relation(fields: [meetingId], references: [id])
  meetingId   Int
  content     String
  status      String   @default("pending") // pending, completed
  assignedTo  String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([meetingId])
}
